// UUB SPI adventure
//////////////////////// SPI CONFIGURATION ///////////////////////////////////////
#include <fcntl.h>
#include <stdio.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>
#include <stdint.h>
#include <unistd.h>
#include <stdlib.h>
#include <getopt.h>


 char ADC_LVDS[3] = {0x00,0x14,0xA0} ; // ADC bus configuration LVDS interleave
 char ADC_RESET[3] = {0x00,0x00,0x3C} ; // ADC reset
 char ADC_VREF[3] = {0x00,0x18,0x04} ; // ADC VREF setting
 char ADC_DELAY[3] = {0x00,0x17,0x25} ; // ADC delay

 char cmd2channel[3] = {0x00,0x05,0x03}; // Select the 2 channels for previous cmd
 char cmdchannelA[3] = {0x00,0x05,0x01}; // Select the channel A for previous cmd
 char cmdchannelB[3] = {0x00,0x05,0x02}; // Select the channel B for previous cmd

 char TestModeMS[3]  = {0x00,0x0D,0x01}; // ADC Test Mode Middle Scale
 char TestModeFS[3]  = {0x00,0x0D,0x02}; // ADC Test Mode Full Scale
 char NormalMode[3] = {0x00,0x0D,0x00}; // ADC Normal mode
 char TestModeRM[3] = {0x00,0x0D,0x5F}; // ADC Test Mode Ramp
 char TestModeA5[3] = {0x00,0x0D,0x44}; // ADC Test Mode AAA555

 char TstUser1LSB[3] = {0x00,0x19,0x55}; // User defined pattern 1 LSB
 char TstUser1MSB[3] = {0x00,0x1A,0xAA}; // User defined pattern 1 MSB
 char TestModeUM[3]  = {0x00,0x0D,0x08}; // ADC Test Mode USER1
 char AdcDelay[5]    = {0x00};           // Calculated ADC delay table

 static uint8_t mode = 1;
 static uint8_t bits = 8;
 static uint32_t speed = 5000000;
 static uint16_t delay;

//static u8 RecvBuffer[RCV_BUF_SIZE] = {0x00}; /* Buffer for Receiving Data */
// settings for clock generator
char buf[]={0x00,0x20,
			0x01,0x01,0xB4,0x01,0x02,0x50,0x40,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x6D,0x02,0x00,0x00,
            0x99,0x03,0x32,0x68,0x00,0x40,0x02,0x08};


static void pabort(const char *s)
{
	perror(s);
	abort();
}

int main ()
{
// UUB clock generatore initialization on I2C-1
	int file, k;
	int adapter_nr = 1; /* probably dynamically determined */
	char filename[20];
	printf("Initialization of I2C clock generator..... ");
	snprintf(filename, 19, "/dev/i2c-%d", adapter_nr);
	file = open(filename, O_RDWR);
	if (file < 0) {
			exit(1);
	}
	int addr = 0x65; /* The I2C address clock generator CDCE913*/
	if (ioctl(file, I2C_SLAVE, addr) < 0) {
			exit(2);
	}
    if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
    	 	exit(3);
    }
	printf("Done!\n\r");
///////////////////////////////////////////////////////////////////////////////
// UUB jitter cleaner initialization on I2C-1
	//	addr = 0x6C; /* The I2C address Jitter cleaner*/

	//	close(file);

//////////////////////// SPI CONFIGURATION ///////////////////////////////////////

		int i, fd;
		int ret = 0;
		printf("Initialization of SPI-0 ADC..... ");
 i=1;
		//			for (i = 0; i < 5; i++){
						snprintf(filename, 19, "/dev/spidev32766.0");

							fd = open(filename, O_RDWR);
							if (fd < 0)
								pabort("can't open device");
						// spi mode
							ret = ioctl(fd, SPI_IOC_WR_MODE, &mode);
							if (ret == -1)
								pabort("can't set spi mode");

//						ret = ioctl(fd, SPI_IOC_RD_MODE, &mode);
//							if (ret == -1)
//								pabort("can't get spi mode");
//
						// bits per word
							ret = ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &bits);
							if (ret == -1)
								pabort("can't set bits per word");

							ret = ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &bits);
							if (ret == -1)
								pabort("can't get bits per word");

						// max speed hz
							ret = ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &speed);
							if (ret == -1)
								pabort("can't set max speed hz");

							ret = ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &speed);
							if (ret == -1)
								pabort("can't get max speed hz");



							if (write(file, ADC_RESET, sizeof(ADC_RESET)) != sizeof(ADC_RESET)) {
									exit(3);
							}
							if (write(file, ADC_LVDS, sizeof(ADC_LVDS)) != sizeof(ADC_LVDS)) {
							    	exit(3);
							}

							if (write(file, ADC_VREF, sizeof(ADC_VREF)) != sizeof(ADC_VREF)) {
									exit(3);
							}

							if (write(file, NormalMode, sizeof(NormalMode)) != sizeof(NormalMode)) {
									exit(3);
							}
							close(file);
							usleep (100);
			//		};


		printf("Done!\n\r");

}
