// led shot generator
#include <fcntl.h>
#include <stdio.h>
#include <linux/i2c-dev.h>
<<<<<<< HEAD
#include <unistd.h>
#include <sys/mman.h>
#include <stdlib.h>
#define DAC_ADDR		0x0C // DAC slave address DAC AD5316
int file;
int dac_led1, dac_led2, dac_led3, dac_led4;


int main(int argc, char *argv[])
{
	if (argc == 1) {
		 dac_led1 = 400;//argv[1];//valore canale 1 dac led
		 dac_led3 = 400;//argv[2];//valore canale 3 dac led
		// USCITA PX4
		 dac_led2 = 600;//argv[3];//valore canale 2 dac led
		 dac_led4 = 600;//argv[4];//valore canale 4 dac led
		 printf("Default LED values %d  %d  %d  %d\n",dac_led1,dac_led2,dac_led3,dac_led4);
	}
	else if (argc < 5 || argc > 6){
		usage();
	}
	else {
		dac_led1 = atoi (argv[1]);
		dac_led2 = atoi (argv[2]);
		dac_led3 = atoi (argv[3]);
		dac_led4 = atoi (argv[4]);
		printf("LED values %d  %d  %d  %d\n",dac_led1,dac_led2,dac_led3,dac_led4);
	}

	int fd, file,i,j, Status, data_trig;
	int int_trig =  0x41200000;
	int value = 0;
	unsigned page_addr, page_offset;
	void *ptrt;
	unsigned page_size=sysconf(_SC_PAGESIZE);
	page_offset = 16;
	char buf[]={0x02,0x73,0x50};
	char filename[20];

   	printf("Initialization of I2C LED DAC..... ");
	snprintf(filename, 19, "/dev/i2c-0");
	file = open(filename, O_RDWR);
	if (file < 0) {
			exit("no open file");
	}
	if (ioctl(file, I2C_SLAVE, DAC_ADDR) < 0) {
			exit("Fail to setup slave addr!");
	}
    // Preparo i byte da inviare in sendbuffer
     // calcolo canale 1
     	buf[0] = 0x01;	//Seleziono canale del DAC
     	buf[1] = (dac_led1/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led1 & 0x3F)*4;
    	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
        	 	exit(3);
         	}
     	usleep(500);
     // calcolo canale 2
     	buf[0] = 0x02;	//Seleziono canale del DAC
     	buf[1] = (dac_led2/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led2 & 0x3F)*4;
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	       exit(3);
     	}
     	usleep(500);
     // calcolo canale 3
     	buf[0] = 0x04;	//Seleziono canale del DAC
     	buf[1] = (dac_led3/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led3 & 0x3F)*4;
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	       exit(3);
     	}
     	usleep(500);
     // calcolo canale 4
     	buf[0] = 0x08;	//Seleziono canale del DAC
     	buf[1] = (dac_led4/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led4 & 0x3F)*4;
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	    exit(3);
     	}
     	printf("Done!\n");

     	fd = open ("/dev/mem", O_RDWR);
     	page_addr = (int_trig & (~(page_size-1)));
     	page_offset = int_trig - page_addr;
     	ptrt = mmap(NULL, page_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, page_addr);

     	printf("LED Pulse is running... ");
     	while(1)
     	{
     		value = 0b00000011; //impostazione per trigger esterno
     		*((unsigned *)(ptrt + page_offset)) = value;// Write value to the device register
     		usleep(1);
     		value = 0b00000010;
     		*((unsigned *)(ptrt + page_offset)) = value;
     		usleep (200000);
     	}


}

void usage(void)
{
	printf("|    -e External trigger   |\n");
	printf("|    -i internal trigger   |\n");
//	printf("    -g not defined\n");
//	printf("    -o not defined\n");
	exit(1);
=======

#define DAC_ADDR		0x0C // DAC slave address DAC AD5316
#define BUFFER_SIZE	132
//u8 SendBuffer[BUFFER_SIZE];    /**< Buffer for Transmitting Data */

int file;
int dac_led1, dac_led2, dac_led3, dac_led4;

int main(int argc, char *argv[])
{
	printf("command line argv: ");
	while(argc--)
		printf("%s\n", *argv++);
		return 0;

	char buf[]={0x01,0x77,0xD0};

	char filename[20];

    // USCITA PX3
     dac_led1 = argv[1];//valore canale 1 dac led
     dac_led3 = argv[2];//valore canale 3 dac led

     // USCITA PX4
     dac_led2 = argv[3];//valore canale 2 dac led
     dac_led4 = argv[4];//valore canale 4 dac led

 	 int pointer_byte = 0x01;

	printf("Initialization of I2C DAC..... %x",dac_led1);
	snprintf(filename, 19, "/dev/i2c-0");
	file = open(filename, O_RDWR);
	if (file < 0) {
			exit(1);
	}

	if (ioctl(file, I2C_SLAVE, DAC_ADDR) < 0) {
			exit("Fail to setup slave addr!");
	}

    if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
    	 	exit("Attention, fail to send data to slave device!");
     }
/*
    for ( k = 0; k < nb_initData_SI5347; k=k+3)
    		    {
    			couple1[0]=0x01;
    			couple1[1]=jitter[k];
    			couple2[0]=jitter[k+1];
    			couple2[1]=jitter[k+2];
    			write(file, couple1,sizeof(couple1));
    			write(file, couple2,sizeof(couple2));
    		    }








    // Preparo i byte da inviare in sendbuffer
     // calcolo canale 1
     	SendBuffer[0] = 0x01;	//Seleziono canale del DAC
     	SendBuffer[1] = (dac_led1/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	SendBuffer[2] = (dac_led1 & 0x3F)*4;
//     	XIicPs_MasterSendPolled(&Iic, SendBuffer, 3, IIC_SLAVE_ADDR); // invio al DAC tutti i byte di programmazione di 4 canali
     	usleep(1000);

     // calcolo canale 2
     	SendBuffer[0] = 0x02;	//Seleziono canale del DAC
     	SendBuffer[1] = (dac_led2/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	SendBuffer[2] = (dac_led2 & 0x3F)*4;
//     	XIicPs_MasterSendPolled(&Iic, SendBuffer, 3, IIC_SLAVE_ADDR); // invio al DAC tutti i byte di programmazione di 4 canali
     	usleep(1000);

     // calcolo canale 3
     	SendBuffer[0] = 0x04;	//Seleziono canale del DAC
     	SendBuffer[1] = (dac_led3/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	SendBuffer[2] = (dac_led3 & 0x3F)*4;
//     	XIicPs_MasterSendPolled(&Iic, SendBuffer, 3, IIC_SLAVE_ADDR); // invio al DAC tutti i byte di programmazione di 4 canali
     	usleep(1000);

     // calcolo canale 4
     	SendBuffer[0] = 0x08;	//Seleziono canale del DAC
     	SendBuffer[1] = (dac_led4/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	SendBuffer[2] = (dac_led4 & 0x3F)*4;
//     	XIicPs_MasterSendPolled(&Iic, SendBuffer, 3, IIC_SLAVE_ADDR); // invio





*/




	printf("Done!\n\r");


>>>>>>> 2beaa5130f425292206b0f1e5bde86633226516b
}
