// led shot generator
#include <fcntl.h>
#include <stdio.h>
#include <linux/i2c-dev.h>
#include <unistd.h>
#include <sys/mman.h>
#include <stdlib.h>


#define DAC_ADDR		0x0C // DAC slave address DAC AD5316
int file;
int dac_led1, dac_led2, dac_led3, dac_led4;
/*int main(int argc, char *argv[])
{
	printf("command line argv: ");
	while(argc--)
		printf("%s\n", *argv++);
		return 0;
*/

int main()
{
	int file, k;
	int adapter_nr = 1; /* probably dynamically determined */
	char filename[20];
	int fd, file,i,j, Status, data_trig;
	int int_trig =  0x41200000;
	int value = 0;
	unsigned page_addr, page_offset;
	void *ptrt;
	unsigned page_size=sysconf(_SC_PAGESIZE);
	page_offset = 16;

	char buf[]={0x02,0x73,0x50};
	char filename[20];
    // USCITA PX3
     dac_led1 = 380;//argv[1];//valore canale 1 dac led
     dac_led3 = 380;//argv[2];//valore canale 3 dac led
     // USCITA PX4
     dac_led2 = 600;//argv[3];//valore canale 2 dac led
     dac_led4 = 600;//argv[4];//valore canale 4 dac led

   	printf("Initialization of I2C LED DAC..... ");

//	printf("\n%x\n%x\n%x\n",buf[0],buf[1],buf[2]);
	snprintf(filename, 19, "/dev/i2c-0");
	file = open(filename, O_RDWR);
	if (file < 0) {
			exit("no open file");
	}
	if (ioctl(file, I2C_SLAVE, DAC_ADDR) < 0) {
			exit("Fail to setup slave addr!");
	}

    // Preparo i byte da inviare in sendbuffer
     // calcolo canale 1
     	buf[0] = 0x01;	//Seleziono canale del DAC
     	buf[1] = (dac_led1/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led1 & 0x3F)*4;
     	printf("\n%x  %x  %x",buf[0],buf[1],buf[2]);
    	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
        	 	exit(3);
         	}
     	usleep(500);
     // calcolo canale 2
     	buf[0] = 0x02;	//Seleziono canale del DAC
     	buf[1] = (dac_led2/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led2 & 0x3F)*4;
     	printf("\n%x  %x  %x",buf[0],buf[1],buf[2]);
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	       exit(3);
     	}
     	usleep(500);
     // calcolo canale 3
     	buf[0] = 0x04;	//Seleziono canale del DAC
     	buf[1] = (dac_led3/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led3 & 0x3F)*4;
     	printf("\n%x  %x  %x",buf[0],buf[1],buf[2]);
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	       exit(3);
     	}
     	usleep(500);
     // calcolo canale 4
     	buf[0] = 0x08;	//Seleziono canale del DAC
     	buf[1] = (dac_led4/64) + 112; //primi 4 bit piu' significativi di val trasferiti nei meno 4 significativi di a e aggiungo ctrl_reg=112
     	buf[2] = (dac_led4 & 0x3F)*4;
     	printf("\n%x  %x  %x\n",buf[0],buf[1],buf[2]);
     	if (write(file, buf, sizeof(buf)) != sizeof(buf)) {
     	    exit(3);
     	}

     	printf("Done!\n\r");
//    	printf("Scope with internal trigger is running... ");

fd = open ("/dev/mem", O_RDWR);
     		page_addr = (int_trig & (~(page_size-1)));
     		page_offset = int_trig - page_addr;
     		ptrt = mmap(NULL, page_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, page_addr);
     	i=0;
     	while(1)
     	{


  //   		printf("Pulse...%d\n",i);

     		value = 0b00000011; //impostazione per trigger esterno
     		*((unsigned *)(ptrt + page_offset)) = value;// Write value to the device register
     		usleep(1);
     		value = 0b00000010;
     		*((unsigned *)(ptrt + page_offset)) = value;
     		i = i + 1;




     	//	fclose(fd);
     		usleep (200000);
     	}


}
